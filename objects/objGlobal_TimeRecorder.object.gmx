<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_left = false;
key_right = false;
key_jump = false;
recording = false;
global.move_count = 0; //Which move the player is on currently
global.time_array[0, 0] = 0; //How many Movement counts are in the array
global.time_array[0, 1] = 0;
global.timer = 0; //How long has the current move lasted
//Either 1, 2, or 3
//1 Being Move Left
//2 Being Move Right
//3 Being Jump
starting_x = 0;
starting_y = 0;
moved = false;
not_moving = 0;
moving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Script for Recording Time, Change values to Change stuff
key_left = keyboard_check_direct(ord("A"))
key_right = keyboard_check_direct(ord("D"))
key_jump = keyboard_check_direct(vk_space);
if (recording)
{
    if (keyboard_check_pressed(vk_space))
    {
        if(not_moving &gt; 0)
        {
            global.move_count+=1;
            global.time_array[global.move_count, 0] = 4;
            global.time_array[global.move_count, 1] = not_moving;
            not_moving = 0;
        }
        global.move_count+=1;
        global.time_array[global.move_count, 0] = 0;
        global.time_array[global.move_count, 1] = 0;
    }
    if (keyboard_check_pressed(ord("A")))
    {
        if(not_moving &gt; 0)
        {
            global.move_count+=1;
            global.time_array[global.move_count, 0] = 4;
            global.time_array[global.move_count, 1] = not_moving;
            not_moving = 0;
        }
        global.move_count+=1;
        global.time_array[global.move_count, 0] = 0;
        global.time_array[global.move_count, 1] = 0;
    }
    if (keyboard_check_pressed(ord("D")))
    {
        if(not_moving &gt; 0)
        {
            global.move_count+=1;
            global.time_array[global.move_count, 0] = 4;
            global.time_array[global.move_count, 1] = not_moving;
            not_moving = 0;
        }
        global.move_count+=1;
        global.time_array[global.move_count, 0] = 0;
        global.time_array[global.move_count, 1] = 0;
    }
    
    if (keyboard_check(ord("A")))
    {
        //Left
        global.time_array[global.move_count, 0] = 1;
        global.time_array[global.move_count, 1]+= 1;
    }
    if (keyboard_check(ord("D")))
    {
        //Left
        global.time_array[global.move_count, 0] = 2;
        global.time_array[global.move_count, 1]+= 1;
    }
    if(objPlayer.max_jump == false &amp;&amp; objPlayer.grounded == false)
    {
        global.time_array[global.move_count, 0] = 3;
        global.time_array[global.move_count, 1] +=3;
        /*if (keyboard_check(ord("A")))
        {
            global.time_array[global.move_count, 2] = 1;
            global.time_array[global.move_count, 3]+= 1;
        }
        if (keyboard_check(ord("D")))
        {
            global.time_array[global.move_count, 2] = 2;
            global.time_array[global.move_count, 3]+= 1;
        }*/
    }
    if(!key_left &amp;&amp; !key_right &amp;&amp; !key_jump &amp;&amp; objPlayer.hspeed == 0 &amp;&amp; objPlayer.vspeed == 0 &amp;&amp; objPlayer.grounded == true)
    {
       not_moving+=1;
    }

}
if (keyboard_check_released(ord("H")))
{
    
    if (recording == true)
    {
        recording = false;
        exit;
    }
    if (recording == false)
    {
        starting_x = objPlayer.x
        starting_y = objPlayer.y
        recording = true;
        exit;
    }
}

if (keyboard_check_released(ord("Z")))
{
    instance_create(starting_x,starting_y,objClone);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
