<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_left = false;
key_right = false;
key_jump = false;
recording = false;
global.move_count = 0; //Which move the player is on currently
global.timer = 0; //How long has the current move lasted
//Either 1, 2, or 3
//1 Being Move Left
//2 Being Move Right
//3 Being Jump
starting_x = 0;
starting_y = 0;
moved = false;
not_moving = 0;
moving = false;
cancel_rec = 25;
global.step_number = 0;
global.playing = false;
global.script_hold[0, 0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (recording)
{
    cancel_rec-=1;
    if(cancel_rec == 0)
    {
        audio_play_sound(snd_ReverseRecord,10,false);
        //timeline_moment_add_script(global.time_array,step_number, destroy_self);
        recording = false;
        global.script_hold[global.step_number, 0] = stop_jump;
        global.script_hold[global.step_number+1, 0] = stop_move;
        for (var i = array_height_2d(global.script_hold)-1; i != 0; i--)
        {
            if (global.script_hold[i, 0] !=-4)
            {
                timeline_moment_add_script(time_record, i, global.script_hold[i, 0]);
            }
        }
        //tim
        cancel_rec = 25;
    }
    else
    {
        alarm[0] = room_speed;
    }
}
else
{
    cancel_rec = 7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Script for Recording Time, Change values to Change stuff
key_left = keyboard_check_direct(ord("A"));
key_right = keyboard_check_direct(ord("D"));
key_jump = keyboard_check_direct(vk_space);
if (recording)
{
    global.script_hold[global.step_number, 0] = -4;
    
    
    if (keyboard_check_pressed(ord("A")))
    {
        show_debug_message(string(global.step_number) + "Move Left");
        //timeline_moment_add_script(time_record, global.step_number, move_left);  
        global.script_hold[global.step_number, 0] = move_left;
        //global.step_number+=1;
    }
    if (keyboard_check_pressed(ord("D")))
    {
        show_debug_message(string(global.step_number) + "Move Right");
        //timeline_moment_add_script(time_record, global.step_number, move_right); 
        global.script_hold[global.step_number, 0] = move_right;
        //global.step_number+=1;  
    }
    if (keyboard_check_pressed(vk_space))
    {
        show_debug_message(string(global.step_number) + "Jumping");
        //timeline_moment_add_script(time_record, global.step_number, jump);
        global.script_hold[global.step_number, 0] = jump;
    }
    if (keyboard_check_released(ord("A")) || keyboard_check_released(ord("D")))
    {
        show_debug_message(string(global.step_number) + "Stop Move");
       //timeline_moment_add_script(time_record, global.step_number, stop_move);
       global.script_hold[global.step_number, 0] = stop_move;
    }
    if (keyboard_check_released(vk_space))
    {
        show_debug_message(string(global.step_number) + "Stop Jumping");
        //timeline_moment_add_script(time_record, global.step_number, stop_jump);
        global.script_hold[global.step_number, 0] = stop_jump; 
    }
    global.step_number+=1;
    
    
    
}
if (keyboard_check_released(vk_control))
{
    
    if (recording == true)
    {
        
        recording = false;
        cancel_rec = 25;
        alarm[0] = 0;
        audio_play_sound(snd_ReverseRecord,10,false);
        global.script_hold[global.step_number, 0] = stop_jump;
        global.script_hold[global.step_number+1, 0] = stop_move;
        for (var i = array_height_2d(global.script_hold)-1; i != 0; i--)
        {
            if (global.script_hold[i, 0] !=-4)
            {
                timeline_moment_add_script(time_record, i, global.script_hold[i, 0]);
            }
        }
        //timeline_moment_add_script(global.time_array,step_number, destroy_self);
        exit;
    }
    if (recording == false)
    {
        //timeline_moment_add_script(time_record, global.step_number+1, stop_move);
        //timeline_moment_add_script(time_record, global.step_number+2, stop_jump);
        starting_x = objPlayer.x
        starting_y = objPlayer.y
        //global.script_hold = 0;
        timeline_clear(time_record);
        global.step_number = 0;
        global.script_hold = 0;
        timeline_index = -1;
        recording = true;
        audio_play_sound(snd_Record,10,false);
        
        alarm[0] = room_speed;
        exit;
    }
}

if (keyboard_check_released(vk_alt))
{
    if (!instance_exists(objClone))
    {
        global.playing = true;
        instance_create(starting_x,starting_y,objClone);
        audio_play_sound(snd_Playback,10,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
